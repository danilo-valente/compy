import { Command, EnumType } from 'cliffy/command/mod.ts';

import { buildNative } from '~/monorepo.ts';
import { CmdType, EggType, getCompy } from '~/cli/util.ts';

export const sh = new Command()
  .name('sh')
  .description('Generate a shell script to run a Deno command in a module\'s context')
  .type('cmd', new CmdType())
  .type('egg', new EggType())
  .type('shell', new EnumType(['sh', 'bash', 'zsh', 'ash', 'fish']))
  .arguments('<command:cmd> <module:egg>')
  .option('-s, --shell <shell:shell>', 'Shell to use', { default: 'sh' })
  .action(async ({ shell }, cmd, module, ...args) => {
    const compy = await getCompy();
    const native = await buildNative(compy, cmd, module, args);

    const shEnv = Object.entries(native.env).map(
      ([key, value]) => `export ${key}="${value.replace(/"/g, '\\"')}"`,
    );

    const shArgs = native.args.map(
      (arg) => arg.replace(/([\\\s])/g, '\\$1'),
    );

    const scripts = `
        #!/usr/bin/env ${shell}

        # Script generated by compy
        # https://deno.land/x/compy

        cd ${native.cwd}

        ${shEnv.join('\n')}

        ${native.exec} ${shArgs.join(' ')}
      `.replace(/^[ \t]+/gm, '').replace(/\n{3,}/g, '\n\n');

    await Deno.stdout.write(
      new TextEncoder().encode(scripts),
    );
  });
